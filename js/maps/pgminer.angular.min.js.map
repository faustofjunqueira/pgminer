{"version":3,"sources":["pgminer.angular.min.js","js/config/config.js","js/ctrl/docController.js","js/directive/documentation.js","js/service/parametroFactory.js","js/service/retornoFactory.js"],"names":["angular","module","app","controller","$scope","parametroFactory","retornoFactory","listaFuncoes","nome","descricao","cabecalho","parametros","criar","retorno","directive","templateUrl","restrict","scope","listaFuncao","link","$element","$attr","ctrl","escolhida","escolherFuncao","funcao","isArray","e","Array","service","this","tipo"],"mappings":"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","file":"../pgminer.angular.min.js","sourcesContent":[null,"angular.module('pgminer',[]);\n\n(function(){\n\n})(angular.module('pgminer'));","(function(app){\n\n  app.controller('DocController', function($scope,parametroFactory, retornoFactory){\n    $scope.listaFuncoes = [\n      {\n        nome: 'apply_inverse_sigmoid',\n        descricao:'Aplica a função inversa da sigmoid sobre cada elemento x 1da matriz m. Inversa da sigmoid: -log( 2.0/(x+1.0) -1.0)/16.0',\n        cabecalho:'apply_inverse_sigmoid(in m matrix, out c matrix) RETURNS matrix',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'Matriz com valores aplicados na função')\n        ]\n      },\n      {\n        nome: 'apply_sigmoid',\n        descricao:'Aplica a função sigmoid sobre cada elemento x da matriz m. Sigmoid: 2.0/(1.0 + exp( -16.0*x ) ) - 1.0',\n        cabecalho:'apply_sigmoid(in m matrix, out c matrix) RETURNS matrix',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'Matriz com valores aplicados na função sigmoid')\n        ]\n      },\n      {\n        nome: 'blas_multiply',\n        descricao:'Função executa a multiplicação de duas matrizes. C = A * B',\n        cabecalho:'blas_multiply(a bigint, b bigint) RETURNS bigint',\n        parametros: [\n          parametroFactory.criar('A', 'bigint', 'Ponteiro para Matriz A'),\n          parametroFactory.criar('B', 'bigint', 'Ponteiro para Matriz B')\n        ],\n        retorno:[\n          retornoFactory.criar('C', 'bigint', 'Ponteiro para matriz resultante')\n        ]\n      },\n      {\n        nome: 'classe2vector',\n        descricao:'Transforma o conjunto de classes para vetores de valores 0 a 1',\n        cabecalho:'classe2vector(sql_distinct_classes text, OUT classe text, OUT vector double precision[]) RETURNS SETOF record',\n        parametros: [\n          parametroFactory.criar('sql_distinct_classes', 'text', \"EX: select * from classe2vector( 'select distinct classe from iris order by classe' )\")\n        ],\n        retorno:[\n          retornoFactory.criar('classe', 'matrix', 'Matriz com valores aplicados na função sigmoid'),\n          retornoFactory.criar('vector', 'double precision[]', 'Matriz com valores aplicados na função sigmoid')\n        ]\n      },\n      {\n        nome: 'cleanup_table',\n        descricao:'Zera ou cria uma tabela',\n        cabecalho:'cleanup_table(table_name text, table_columns text, make_temp bool)',\n        parametros: [\n          parametroFactory.criar('table_name', 'text', 'Nome da tabela'),\n          parametroFactory.criar('table_columns', 'text', \"Colunas da tabela. Ex: '( GRUPO INTEGER PRIMARY KEY, VALOR FLOAT8[] NOT NULL )'\"),\n          parametroFactory.criar('make_temp', 'bool', 'Se true, a tabela será temporária, caso contrário a tabela será permanente')\n        ],\n        retorno:[]\n      },\n      {\n        nome: 'cos',\n        descricao:'Aplica a função cosseno nos pontos',\n        cabecalho:['cos(a double precision[], b double precision[])','cos(a matrix, b matrix)'],\n        parametros: [\n          parametroFactory.criar('A', 'double precision[] | matrix', 'Matriz ou vetor A'),\n          parametroFactory.criar('B', 'double precision[] | matrix', 'Matriz ou vetor B')\n        ],\n        retorno:[\n          retornoFactory.criar('cosseno', 'double precision', 'Valor da função cosseno')\n        ]\n      },\n\n      {\n        nome: 'create_fann',\n        descricao:'Função cria um RNA baseada na struct da FANN',\n        cabecalho:\"create_fann(table_data text, layers integer[], validation_fold text DEFAULT '1'::text, test_fold text DEFAULT '1'::text, max_epochs integer DEFAULT 500, epochs_between_report integer DEFAULT 10, OUT net fann, OUT mse_train double precision, OUT mse_validation double precision, OUT mse_test double precision, OUT misclassified_train integer, OUT misclassified_validation integer, OUT misclassified_test integer) RETURNS SETOF record\",\n        parametros: [\n          parametroFactory.criar(\"table_data\", 'text','Deve ser uma tabela preparada por prepare_data_to_learn, tendo as colunas id, fold, entrada, saida, com entrada e saida normalizadas'),\n          parametroFactory.criar(\"layers\", 'integer[]','array com o número de neurônios das camadas intermediárias(hdden layers)'),\n          parametroFactory.criar(\"validation_fold\", 'text', \"fold de validação. default: 1\"),\n          parametroFactory.criar(\"test_fold\", 'text', 'fold de teste. default: 1'),\n          parametroFactory.criar(\"max_epochs\", 'integer', \"número máximo de épocas. default: 500\"),\n          parametroFactory.criar(\"epochs_between_report\", 'integer', \"número de epocas entre relatórios. default: 10\")\n        ],\n        retorno:[\n          retornoFactory.criar(\"mse_train\", \"double precision\", \"erro mínimo quadrado\"),\n          retornoFactory.criar(\"mse_validation\", \"double precision\", \"erro mínimo quadrado\"),\n          retornoFactory.criar(\"mse_test\", \"double precision\", \"erro mínimo quadrado\"),\n          retornoFactory.criar(\"misclassified_train\", \"integer\", \"acurácia\"),\n          retornoFactory.criar(\"misclassified_validation\", \"integer\", \"acurácia\"),\n          retornoFactory.criar(\"misclassified_test\", \"integer\", \"acurácia\")\n        ]\n      },\n      {\n        nome: 'create_nn',\n        descricao:'Função cria um RNA baseada na neuralnet',\n        cabecalho:'create_nn(table_data text, hidden integer[], functionActivation integer DEFAULT 3, steepness float default 0.01, validation_fold integer default 1, test_fold integer default 1, max_epochs integer default 500, epochs_between_report integer default 10, OUT nn neuralnet, OUT mse_report double precision[]) RETURNS record',\n        parametros: [\n          parametroFactory.criar('table_data', 'text','Deve ser uma tabela preparada por prepare_data_to_learn, tendo as colunas id, fold, entrada, saida, com entrada e saida normalizadas.'),\n          parametroFactory.criar('hidden', 'integer[]','array com o número de neurônios das camadas intermediárias(hdden layers)'),\n          parametroFactory.criar('functionActivation', 'integer', 'Função de ativação. Veja todos os valores em Função de Ativação: default: 3 (NN_SIGMOID)'),\n          parametroFactory.criar('steepness', 'float', 'valor do steepness. default: 0.01' ),\n          parametroFactory.criar('validation_fold', 'integer', 'fold de validação. default: 1' ),\n          parametroFactory.criar('test_fold', 'integer', 'fold de teste. default: 1' ),\n          parametroFactory.criar('max_epochs', 'integer', 'número máximo de épocas. default: 500' ),\n          parametroFactory.criar('epochs_between_report', 'integer', 'número de epocas entre relatórios. default: 10'),\n        ],\n        retorno:[\n          retornoFactory.criar('nn', 'neuralnet', 'RNA'),\n          retornoFactory.criar('mse_report', 'double precision[]', 'mínimo erro quadrado')\n        ]\n      },\n      {\n        nome: 'diag',\n        descricao:'Cria e retorna uma matrix diagonal [a] do tamanho de v.',\n        cabecalho:[\n          'diag(in v vector, out c matrix)',\n          'diag(size integer, a double precision DEFAULT 1.0, OUT c matrix)'\n        ],\n        parametros: [\n          parametroFactory.criar('v', 'vector', 'vetor que será transpassado para diagonal'),\n          parametroFactory.criar('size', 'integer', 'dimensão da matriz'),\n          parametroFactory.criar('a', 'double precision', 'valores que serão inseridos na diagonal default 1.0')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'matriz diagonal')\n        ]\n      },\n      {\n        nome: 'dims',\n        descricao:'Consegue as dimensões da matriz',\n        cabecalho:'dims(m matrix, OUT lines integer, OUT cols integer) RETURNS record',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('lines', 'integer', 'Número de linhas da matriz'),\n          retornoFactory.criar('cols', 'integer', 'Número de colunas da matriz')\n        ]\n      },\n      {\n        nome: 'distancia',\n        descricao:'Distância de duas matrizes A e B',\n        cabecalho:'distancia(a matrix, b matrix, OUT valor double precision) RETURNS double precision',\n        parametros: [\n          parametroFactory.criar('A', 'matrix', 'Matriz de valores'),\n          parametroFactory.criar('B', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('distancia', 'double precision', 'distancia de duas matrizes')\n        ]\n      },\n      {\n        nome: 'dup',\n        descricao:'Duplica uma matriz',\n        cabecalho:'dup(m matrix, OUT c matrix) RETURNS matrix',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'Matriz duplicada')\n        ]\n      },\n      {\n        nome: 'fann',\n        descricao:'Converte para o tipo fann',\n        cabecalho:'fann(ann bigint, OUT c fann) RETURNS fann',\n        parametros: [\n          parametroFactory.criar('ann', 'bigint', 'ponteiro para ann')\n        ],\n        retorno:[\n          retornoFactory.criar('ann', 'fann', 'Estrutura fann')\n        ]\n      },\n      {\n        nome: 'fann_create_train_data',\n        descricao:'Criar estrutura de dados para treinamento',\n        cabecalho:'fann_create_train_data(entrada matrix, saida matrix, OUT r traindata) RETURNS traindata',\n        parametros: [\n          parametroFactory.criar('entrada', 'matrix', 'matrix normalizada com os valores de entrada do treinamento'),\n          parametroFactory.criar('saída', 'matrix', 'matrix normalizada com os valores de saída. classificados')\n        ],\n        retorno:[\n          retornoFactory.criar('data', 'traindata', 'estrutura preparada para treinamento')\n        ]\n      },\n      {\n        nome: 'free',\n        descricao:'Desaloca uma matriz',\n        cabecalho:'free(m matrix) RETURNS void',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[]\n      },\n      {\n        nome: 'get_col',\n        descricao:'Retorna a coluna de uma matriz',\n        cabecalho:'get_col(m matrix, col integer) RETURNS double precision[]',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores'),\n          parametroFactory.criar('col', 'integer', 'índice da coluna'),\n        ],\n        retorno:[\n          retornoFactory.criar('coluna', 'double precision[]', 'array com os valores da coluna')\n        ]\n      },\n      {\n        nome: 'get_line',\n        descricao:'Retorna a linha de uma matriz',\n        cabecalho:'get_line(m matrix, line integer) RETURNS double precision[]',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores'),\n          parametroFactory.criar('line', 'integer', 'índice da linha')\n        ],\n        retorno:[\n          retornoFactory.criar('line', 'double precision[]', 'array com os valores da linha')\n        ]\n      },\n      {\n        nome: 'inv',\n        descricao:'Retorna a matriz inversa',\n        cabecalho:'inv(m matrix, OUT c matrix) RETURNS matrix',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'matriz inversa de m')\n        ]\n      },\n      {\n        nome: 'inverse_sigmoid',\n        descricao:'Retorna o valor da sigmoid inversa. Inversa da sigmoid: ln( x/(1.0 - x) )/2.0',\n        cabecalho:[\n          'inverse_sigmoid(a double precision[]) RETURNS double precision[]',\n          'inverse_sigmoid(e double precision) RETURNS double precision'\n        ],\n        parametros: [\n          parametroFactory.criar('a', 'double precision[]', 'array de valores que serão aplicados a x na função '),\n          parametroFactory.criar('x', 'double precision', 'valor a ser aplicado na função')\n        ],\n        retorno:[\n          retornoFactory.criar('inv', 'double precision[]', 'valores da inversa da sigmoid'),\n          retornoFactory.criar('inv', 'double precision', 'valor da inversa da sigmoid')\n        ]\n      },\n      {\n        nome: 'make_dense_matrix',\n        descricao:\"Cria uma matiz densa a partir de um SQL de uma matriz esparsa\",\n        cabecalho:\"make_dense_matrix(sql text, zero text DEFAULT ''::text, centrar boolean DEFAULT true) RETURNS bigint\",\n        parametros: [\n          parametroFactory.criar('sql', 'text', \"SQL de uma matriz esparsa do tipo 'select linha, coluna, valor from ...\"),\n          parametroFactory.criar('zero', 'text', \"significa que zero é zero; não haverá substituição; 'mavg' significa substituir zero pela média dos valores da matriz inteira; 'lavg' significa substituir os zeros de cada linha pela média de cada linha; 'cavg' significa substituir os zeros de cada coluna pela média de cada coluna\"),\n          parametroFactory.criar('centrar', 'bool', \"centrar a média em zero, o que equivale a subtrair de cada valor diferente de zero a média escolhida.\"),\n        ],\n        retorno:[\n          retornoFactory.criar('matrix', 'bigint', \"ponteiro para a matriz densa\")\n        ]\n      },\n      {\n        nome: 'make_matrix',\n        descricao:'Cria uma matriz a partir de um sql',\n        cabecalho:'make_matrix(sql text, OUT matrix bigint, OUT keys bigint) RETURNS record',\n        parametros: [\n          parametroFactory.criar('sql', 'text', \"'sql' deve ser uma string retornando (id,valor), onde 'id integer primary key' e valor é um array float8[] com os valores do ponto, ou uma tabela/view com as colunas id::integer, valor::float8[] EX1: 'select id, array[ x, y ] valor from tabela' EX2: 'select cast( row_number() over() as integer ) id, array[ x, y ] valor from tabela'\")\n        ],\n        retorno:[\n          retornoFactory.criar('matrix', 'bigint', \"ponteiro para matrix\"),\n          retornoFactory.criar('keys', 'bigint', \"ponteiro para vetor contendo a chave (id) de cada linha da matriz.\")\n        ]\n      },\n      {\n        nome: 'make_random_matrix',\n        descricao:'Criar uma matriz com valores randômicos',\n        cabecalho:'make_random_matrix(n_lines integer, n_cols integer, a double precision DEFAULT 0.0, b double precision DEFAULT 1.0) RETURNS bigint',\n        parametros: [\n          parametroFactory.criar('n_lines', 'integer', 'número de linhas'),\n          parametroFactory.criar('n_cols', 'integer', 'número de colunas'),\n          parametroFactory.criar('a', 'double precision', 'valores de'),\n          parametroFactory.criar('b', 'double precision', 'valores até'),\n        ],\n        retorno:[\n          retornoFactory.criar('matrix', 'bigint', 'ponteiro para matriz')\n        ]\n      },\n      {\n        nome: 'matrix',\n        descricao:'Criar uma matrix',\n        cabecalho:[\n          'matrix(ptr_matrix bigint, OUT c matrix) RETURNS matrix',\n          'matrix(bidimensional_array double precision[], OUT c matrix) RETURNS matrix',\n          'matrix(sql text, OUT c matrix) RETURNS matrix'\n        ],\n        parametros: [\n          parametroFactory.criar('ptr_matrix', 'bigint', 'ponteiro para a matrix'),\n          parametroFactory.criar('bidimensional_array','double precision[]', 'array de valores de duas dimensões'),\n          parametroFactory.criar('sql','text', 'sql similar ao make_matrix')\n        ],\n        retorno:[\n          retornoFactory.criar('c', 'matrix', 'matrix estruturada')\n        ]\n      },\n      {\n        nome: 'matrix2table',\n        descricao:'Converte matriz em tabela',\n        cabecalho:[\n          'matrix2table(m matrix, table_name text, OUT nlines integer, OUT ncols integer) RETURNS record',\n          'matrix2table(ptr_matrix bigint, table_name text, OUT nlines integer, OUT ncols integer) RETURNS record',\n          'matrix2table(keys bigint, matrix bigint, table_name text, OUT nlines integer, OUT ncols integer) RETURNS record'\n        ],\n        parametros: [\n          parametroFactory.criar('matrix', 'matrix', 'Matriz de valores'),\n          parametroFactory.criar('ptr_matrix', 'bigint', 'ponteiro para matriz de valores'),\n          parametroFactory.criar('keys', 'bigint', 'ponteiro para vetor com as chaves da nova tabela'),\n          parametroFactory.criar('table_name', 'text', 'nome da tabela'),\n        ],\n        retorno:[\n          retornoFactory.criar('nlines', 'integer', 'número de linhas da tabela'),\n          retornoFactory.criar('ncols', 'integer', 'número de colunas da tabela'),\n        ]\n      },\n      {\n        nome: 'matrix2table_transpose',\n        descricao:'Converte matriz em tabela, com a transposta',\n        cabecalho:[\n          'matrix2table_transpose(matrix bigint, table_name text, OUT nlines integer, OUT ncols integer) RETURNS record',\n          'matrix2table_transpose(keys bigint, matrix bigint, table_name text, OUT nlines integer, OUT ncols integer) RETURNS record'\n        ],\n        parametros: [\n          parametroFactory.criar('matrix', 'bigint', 'ponteiro para matriz de valores'),\n          parametroFactory.criar('keys', 'bigint', 'ponteiro para vetor com as chaves da nova tabela'),\n          parametroFactory.criar('table_name', 'text', 'nome da tabela'),\n        ],\n        retorno:[\n          retornoFactory.criar('nlines', 'integer', 'número de linhas da tabela'),\n          retornoFactory.criar('ncols', 'integer', 'número de colunas da tabela'),\n        ]\n      },\n      {\n        nome: 'max',\n        descricao:'Retorna o maior valor',\n        cabecalho:'max(a double precision, b double precision) RETURNS double precision',\n        parametros: [\n          parametroFactory.criar('a', 'double precision', 'valor a ser comparado'),\n          parametroFactory.criar('b', 'double precision', 'valor a ser comparado'),\n        ],\n        retorno:[\n          retornoFactory.criar('max', 'double precision', 'max = a > b ? a : b')\n        ]\n      },\n      {\n        nome: 'max_elem',\n        descricao:'Retorna o maior valor presente no array',\n        cabecalho:'max_elem(a double precision[]) RETURNS double precision',\n        parametros: [\n          parametroFactory.criar('a', 'double precision[]', 'array de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('max', 'double precision', 'elemento de maior valor no array')\n        ]\n      },\n      {\n        nome: 'min',\n        descricao:'Retorna o menor valor',\n        cabecalho:'min(a double precision, b double precision) RETURNS double precision',\n        parametros: [\n          parametroFactory.criar('a', 'double precision', 'valor a ser comparado'),\n          parametroFactory.criar('b', 'double precision', 'valor a ser comparado'),\n        ],\n        retorno:[\n          retornoFactory.criar('min', 'double precision', 'max = a < b ? a : b')\n        ]\n      },\n      {\n        nome: 'ncols',\n        descricao:'Retorna o número de colunas de uma matrix',\n        cabecalho:'ncols(m matrix, OUT cols integer) RETURNS integer',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('cols', 'integer', 'Número de colunas da matriz m')\n        ]\n      },\n      {\n        nome: 'nlines',\n        descricao:'Retorna o número de linhas de uma matrix',\n        cabecalho:'nlines(m matrix, OUT nlines integer) RETURNS integer',\n        parametros: [\n          parametroFactory.criar('m', 'matrix', 'Matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('nlines', 'integer', 'Número de linhas da matriz m')\n        ]\n      },\n      {\n        nome: 'norm',\n        descricao:'Retorna a norma do array a',\n        cabecalho:['norm(a double precision[]) RETURNS double precision','norm(m matrix) RETURNS double precision'],\n        parametros: [\n          parametroFactory.criar('a', 'double precision[]', 'array de valores'),\n          parametroFactory.criar('m', 'matrix', 'matriz de valores')\n        ],\n        retorno:[\n          retornoFactory.criar('norm', 'double precision', 'norma do array')\n        ]\n      },\n      \n      {\n        nome: 'pgm_hello_world',\n        descricao:'Função de Hello World do Pgminer',\n        cabecalho:'FUNCTION pgm_hello_world(entrada CSTRING) RETURNS CSTRING',\n        parametros: [\n          parametroFactory.criar('entrada', 'CSTRING', 'uma palavra qualquer')\n        ],\n        retorno:[\n          retornoFactory.criar('saida', 'CSTRING', 'a mesma palavra da entrada')\n        ]\n      },\n      {\n        nome: 'pgm_kmeans',\n        descricao:'Executa o algoritmo de clusterização k-means',\n        cabecalho:'pgm_kmeans(pontos bigint, k integer, seed integer, fim integer, OUT centroide bigint, OUT grupo bigint, OUT sumd double precision) RETURNS record',\n        parametros: [\n          parametroFactory.criar('pontos', 'bigint', 'matriz de pontos'),\n          parametroFactory.criar('k', 'integer', 'número de grupos desejados'),\n          parametroFactory.criar('seed', 'integer', '1 - para sortear k pontos para serem os centros dos grupos; 2 - para sortear cada ponto em um grupo'),\n          parametroFactory.criar('fim', 'integer', '1 - se um Grupo Secar , Elimine - o; 2 - se um Grupo Secar , cria um grupo com o elemento mais longe de seu centroide; 3 - se um Grupo Secar , Erro .'),\n        ],\n        retorno:[\n          retornoFactory.criar('centroide', 'bigint', 'ponteiro para matriz com os centroídes'),\n          retornoFactory.criar('grupos', 'bigint', 'O grupo é um ponteiro para vetor de n posições, onde n é o número total de pontos p k , que armazena na posição i, onde i é o índice na matriz correspondente ao ponto p i , o grupo que o ponto p i está alocado. Logo, gi = grupo(pi)'),\n          retornoFactory.criar('sumd', 'double precision', 'soma quadrática mínima'),\n        ]\n      },\n      {\n        nome: 'pgm_cos',\n        descricao:'Aplica função cosseno em duas matrizes',\n        cabecalho:'pgm_cos(matrix_a bigint, matrix_b bigint) RETURNS bigint',\n        parametros: [\n          parametroFactory.criar('a', 'bigint', 'Matriz de valores'),\n          parametroFactory.criar('b', 'bigint', 'Matriz de valores'),\n        ],\n        retorno:[\n          retornoFactory.criar('cosseno', 'bigint', 'ponteiro para vetor')\n        ]\n      },\n\n    ];\n  });\n\n})(angular.module('pgminer'));","(function(app){\n\napp.directive('pgmDocumentacao', function(){\n  return {\n    templateUrl: '/pgminer/src/template/pgmdocumentacao.html',\n    restrict: 'EA',\n    scope: {\n      listaFuncao: '=lista'\n    },\n    link: function($scope,$element,$attr, ctrl){\n      $scope.escolhida = $scope.listaFuncao[0];\n      $scope.escolherFuncao = function(funcao){\n        $scope.escolhida = funcao;\n      };\n    }\n  };\n\n});\n\napp.directive('pgmFuncao', function(){\n  return {\n    scope: {\n      funcao: '='\n    },\n    restrict: 'EA',\n    templateUrl: '/pgminer/src/template/pgmfuncao.html',\n    controller: function($scope){\n      $scope.isArray = function(e){\n        return Array.isArray(e);\n      }\n    }\n  };\n});\n\n\n\n})(angular.module('pgminer'));","(function(app){\n\napp.service('parametroFactory', function(){\n  \n  this.criar = function(nome, tipo, descricao){\n    return {\n      nome: nome,\n      tipo: tipo,\n      descricao: descricao\n    }\n  };\n\n});\n\n})(angular.module('pgminer'));","(function(app){\n\napp.service('retornoFactory', function(){\n  \n  this.criar = function(nome, tipo, descricao){\n    return {\n      nome: nome,\n      tipo: tipo,\n      descricao: descricao\n    }\n  };\n\n});\n\n})(angular.module('pgminer'));"]}